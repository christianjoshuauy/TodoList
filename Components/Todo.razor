@using TestBlazor.Models
@inject IJSRuntime JSRuntime

<li class="todo-item @((todo.IsDone) ? "completed" : "")">
    <div>
        @if (IsEditing)
        {
            <div class="input-container">
                <input class="edit" type="text" @bind="todo.Title" @onkeyup="HandleKeyUp" @onfocusout="HandleFocusOut">
            </div>
        }
        else
        {
            <input class="toggle" type="checkbox" @bind="todo.IsDone" @bind:after="UpdateCheckbox">
            <label class="title" @ondblclick="HandleDoubleClick">@todo.Title</label>
            <button class="destroy" @onclick="OnRemoveClick"></button>
        }
    </div>
</li>

@code {
    [Parameter]
    public required TodoItem todo { get; set; }
    [Parameter]
    public EventCallback<TodoItem> RemoveItem { get; set; }
    [Parameter]
    public EventCallback<TodoItem> UpdateStorage { get; set; }
    [Parameter]
    public bool IsEditing { get; set; }
    [Parameter]
    public EventCallback<TodoItem> OnStartEditing { get; set; }
    [Parameter]
    public EventCallback OnStopEditing { get; set; }
    private bool focusRequested = false;
    private async Task OnRemoveClick(MouseEventArgs e) => await RemoveItem.InvokeAsync(todo);
    private async void UpdateCheckbox() => await UpdateStorage.InvokeAsync();
    private async void HandleDoubleClick(MouseEventArgs e)
    {
        await OnStartEditing.InvokeAsync(todo);
        focusRequested = true;
    }
    private async void HandleFocusOut(FocusEventArgs e) => await OnStopEditing.InvokeAsync();
    private async void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.activeElement.blur()");
            await UpdateStorage.InvokeAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (focusRequested)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"document.querySelector('.edit').focus();");
            focusRequested = false;
        }
    }
}
