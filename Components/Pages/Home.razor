@page "/{filter?}"
@rendermode InteractiveServer
@using TestBlazor.Services
@inject TodoService TodoService
@using TestBlazor.Models

<section class="todoapp">
    <header class="header">
        <h1>todos</h1>
        <div class="input-container">
            <input type="text" class="new-todo" placeholder="What needs to be done?" @bind="text"
                @onkeyup="HandleNewTodoKeyUp">
        </div>
    </header>
    <main>
        @if (FilterTodos().Count != 0)
        {
            <div class="toggle-all-container">
                <input type="checkbox" class="toggle-all" @onclick="HandleToggleAllClick"
                    checked="@(activeTodosCount == 0)">
                <label class="toggle-all-label">Toggle All Input</label>
            </div>
        }
        <TodoList Todos="todos" UpdateStorage="UpdateStorage" FilterTodos="FilterTodos" />
    </main>
    @if (todos.Count != 0)
    {
        <footer class="footer">
            <span class="todo-count">@activeTodosCount @((activeTodosCount > 1) ? "items" : "item") left!</span>
            <ul class="filters">
                <li>
                    <NavLink href="/" Match="NavLinkMatch.All" ActiveClass="selected">All</NavLink>
                </li>
                <li>
                    <NavLink href="/active" ActiveClass="selected">Active</NavLink>
                </li>
                <li>
                    <NavLink href="/completed" ActiveClass="selected">Completed</NavLink>
                </li>
            </ul>
            <button class="clear-completed" @onclick="ClearCompleted" disabled="@(activeTodosCount == todos.Count)">Clear
                completed</button>
        </footer>
    }
</section>

@code {
    [Parameter]
    public string filter { get; set; } = "";
    private List<TodoItem> todos = new();
    private int activeTodosCount => todos.Count(t => !t.IsDone);
    private string text = string.Empty;

    // Helper functions
    private List<TodoItem> FilterTodos()
    {
        return filter switch
        {
            "active" => todos.Where(t => !t.IsDone).ToList(),
            "completed" => todos.Where(t => t.IsDone).ToList(),
            _ => todos
        };
    }
    private async Task UpdateStorage() => await TodoService.SaveTodos(todos);

    // Lifecycle functions
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            todos = await TodoService.LoadTodos();
            StateHasChanged();
        }
    }

    // Event Handlers
    private async Task HandleNewTodoKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && text.Length > 1)
        {
            todos.Add(new TodoItem
                {
                    Title = text
                });
            text = string.Empty;
            await UpdateStorage();
        }
    }
    private async Task ClearCompleted(MouseEventArgs e)
    {
        await TodoService.ClearCompleted(todos);
    }
    private async Task HandleToggleAllClick(MouseEventArgs e)
    {
        var filteredTodos = FilterTodos();
        if (string.IsNullOrEmpty(filter))
        {
            bool isChecked = activeTodosCount != 0;
            filteredTodos.ForEach(t => t.IsDone = isChecked);
        }
        else if (filter == "active" || filter == "completed")
        {
            filteredTodos.ForEach(t => t.IsDone = !t.IsDone);
        }
        await UpdateStorage();
    }
}